#pragma version 3

// @dev I use version 3 instead 2 to include assert opcode

// # substring3
// https://developer.algorand.org/docs/get-details/dapps/avm/teal/opcodes/#substring3
//
// Opcode: 0x52
// Stack: ..., A: []byte, B: uint64, C: uint64 → ..., []byte
// A range of bytes from A starting at B up to but not including C. If C < B, or either is larger than the array length, the program fails
// Availability: v2

byte "Onomatopeya"      // A | Stack = ["Onomatopeya"]
int 3                   // B | Stack = ["Onomatopeya", 3]
int 7                   // C | Stack = ["Onomatopeya", 3, 7]
substring3              // Stack = ["Onomatopeya", 3, 7, "mato"]
byte "mato"
==
assert

// # substring s e
// https://developer.algorand.org/docs/get-details/dapps/avm/teal/opcodes/#substring-s-e
//
// Opcode: 0x51 {uint8 start position} {uint8 end position}
// Stack: ..., A: []byte → ..., []byte
// A range of bytes from A starting at S up to but not including E. If E < S, or either is larger than the array length, the program fails
// Availability: v2

byte "zeroknowledge"    // ["zeroknowledge"]
substring 4 13          // ["zeroknowledge","knowledge"]
byte "knowledge"
==
assert

int 1
return