/**
 * This information is generated by running the following snippet on
 * https://developer.algorand.org/docs/get-details/dapps/avm/teal/opcodes/
 *
 * ```js
 * {
 *     const map = (v, fn) => Array.prototype.map.call(v, fn)
 *     const rows = document.querySelector('#global-f ~ div tbody').querySelectorAll('tr')
 *     const object =
 *         map(rows, v => v.querySelectorAll('td'))
 *         .map(v => map(v, v => v.innerText))
 *         .map(([index, name, type, _in, notes]) => ({index: parseInt(index), name, type, in: _in, notes}))
 *         .reduce((acc, v) => (acc[v.name] = v, acc), {})
 *     const text =
 *         JSON.stringify(object, null, 2)
 *         .replaceAll(/"([^"]+)":/g, "$1:")
 *         .replaceAll(/ *in: "", *\n/g, '')
 *         .replaceAll(/'/g, '\\\'')
 *         .replaceAll(/"/g, '\'')
 *     console.log(text)
 * }
 * ```
 */

export default {
  MinTxnFee: {
    index: 0,
    name: 'MinTxnFee',
    type: 'uint64',
    notes: 'microalgos'
  },
  MinBalance: {
    index: 1,
    name: 'MinBalance',
    type: 'uint64',
    notes: 'microalgos'
  },
  MaxTxnLife: {
    index: 2,
    name: 'MaxTxnLife',
    type: 'uint64',
    notes: 'rounds'
  },
  ZeroAddress: {
    index: 3,
    name: 'ZeroAddress',
    type: '[]byte',
    notes: '32 byte address of all zero bytes'
  },
  GroupSize: {
    index: 4,
    name: 'GroupSize',
    type: 'uint64',
    notes: 'Number of transactions in this atomic transaction group. At least 1'
  },
  LogicSigVersion: {
    index: 5,
    name: 'LogicSigVersion',
    type: 'uint64',
    in: 'v2',
    notes: 'Maximum supported version'
  },
  Round: {
    index: 6,
    name: 'Round',
    type: 'uint64',
    in: 'v2',
    notes: 'Current round number. Application mode only.'
  },
  LatestTimestamp: {
    index: 7,
    name: 'LatestTimestamp',
    type: 'uint64',
    in: 'v2',
    notes: 'Last confirmed block UNIX timestamp. Fails if negative. Application mode only.'
  },
  CurrentApplicationID: {
    index: 8,
    name: 'CurrentApplicationID',
    type: 'uint64',
    in: 'v2',
    notes: 'ID of current application executing. Application mode only.'
  },
  CreatorAddress: {
    index: 9,
    name: 'CreatorAddress',
    type: '[]byte',
    in: 'v3',
    notes: 'Address of the creator of the current application. Application mode only.'
  },
  CurrentApplicationAddress: {
    index: 10,
    name: 'CurrentApplicationAddress',
    type: '[]byte',
    in: 'v5',
    notes: 'Address that the current application controls. Application mode only.'
  },
  GroupID: {
    index: 11,
    name: 'GroupID',
    type: '[]byte',
    in: 'v5',
    notes: 'ID of the transaction group. 32 zero bytes if the transaction is not part of a group.'
  },
  OpcodeBudget: {
    index: 12,
    name: 'OpcodeBudget',
    type: 'uint64',
    in: 'v6',
    notes: 'The remaining cost that can be spent by opcodes in this program.'
  },
  CallerApplicationID: {
    index: 13,
    name: 'CallerApplicationID',
    type: 'uint64',
    in: 'v6',
    notes: 'The application ID of the application that called this application. 0 if this application is at the top-level. Application mode only.'
  },
  CallerApplicationAddress: {
    index: 14,
    name: 'CallerApplicationAddress',
    type: '[]byte',
    in: 'v6',
    notes: 'The application address of the application that called this application. ZeroAddress if this application is at the top-level. Application mode only.'
  }
}