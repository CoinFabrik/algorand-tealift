/**
 * This information is generated by running the following snippet on
 * https://developer.algorand.org/docs/get-details/dapps/avm/teal/opcodes/
 *
 * ```js
 * {
 *     const map = (v, fn) => Array.prototype.map.call(v, fn)
 *     const rows = document.querySelector('#txn-f ~ div tbody').querySelectorAll('tr')
 *     const object =
 *         map(rows, v => v.querySelectorAll('td'))
 *         .map(v => map(v, v => v.innerText))
 *         .map(([index, name, type, _in, notes]) => ({index: parseInt(index), name, type, in: _in, notes}))
 *         .reduce((acc, v) => (acc[v.name] = v, acc), {})
 *     const text =
 *         JSON.stringify(object, null, 2)
 *         .replaceAll(/"([^"]+)":/g, "$1:")
 *         .replaceAll(/ *in: "", *\n/g, '')
 *         .replaceAll(/'/g, '\\\'')
 *         .replaceAll(/"/g, '\'')
 *     console.log(text)
 * }
 * ```
 */
export default {
  Sender: {
    index: 0,
    name: 'Sender',
    type: '[]byte',
    notes: '32 byte address'
  },
  Fee: {
    index: 1,
    name: 'Fee',
    type: 'uint64',
    notes: 'microalgos'
  },
  FirstValid: {
    index: 2,
    name: 'FirstValid',
    type: 'uint64',
    notes: 'round number'
  },
  FirstValidTime: {
    index: 3,
    name: 'FirstValidTime',
    type: 'uint64',
    in: 'v7',
    notes: 'UNIX timestamp of block before txn.FirstValid. Fails if negative'
  },
  LastValid: {
    index: 4,
    name: 'LastValid',
    type: 'uint64',
    notes: 'round number'
  },
  Note: {
    index: 5,
    name: 'Note',
    type: '[]byte',
    notes: 'Any data up to 1024 bytes'
  },
  Lease: {
    index: 6,
    name: 'Lease',
    type: '[]byte',
    notes: '32 byte lease value'
  },
  Receiver: {
    index: 7,
    name: 'Receiver',
    type: '[]byte',
    notes: '32 byte address'
  },
  Amount: {
    index: 8,
    name: 'Amount',
    type: 'uint64',
    notes: 'microalgos'
  },
  CloseRemainderTo: {
    index: 9,
    name: 'CloseRemainderTo',
    type: '[]byte',
    notes: '32 byte address'
  },
  VotePK: {
    index: 10,
    name: 'VotePK',
    type: '[]byte',
    notes: '32 byte address'
  },
  SelectionPK: {
    index: 11,
    name: 'SelectionPK',
    type: '[]byte',
    notes: '32 byte address'
  },
  VoteFirst: {
    index: 12,
    name: 'VoteFirst',
    type: 'uint64',
    notes: 'The first round that the participation key is valid.'
  },
  VoteLast: {
    index: 13,
    name: 'VoteLast',
    type: 'uint64',
    notes: 'The last round that the participation key is valid.'
  },
  VoteKeyDilution: {
    index: 14,
    name: 'VoteKeyDilution',
    type: 'uint64',
    notes: 'Dilution for the 2-level participation key'
  },
  Type: {
    index: 15,
    name: 'Type',
    type: '[]byte',
    notes: 'Transaction type as bytes'
  },
  TypeEnum: {
    index: 16,
    name: 'TypeEnum',
    type: 'uint64',
    notes: 'Transaction type as integer'
  },
  XferAsset: {
    index: 17,
    name: 'XferAsset',
    type: 'uint64',
    notes: 'Asset ID'
  },
  AssetAmount: {
    index: 18,
    name: 'AssetAmount',
    type: 'uint64',
    notes: 'value in Asset\'s units'
  },
  AssetSender: {
    index: 19,
    name: 'AssetSender',
    type: '[]byte',
    notes: '32 byte address. Source of assets if Sender is the Asset\'s Clawback address.'
  },
  AssetReceiver: {
    index: 20,
    name: 'AssetReceiver',
    type: '[]byte',
    notes: '32 byte address'
  },
  AssetCloseTo: {
    index: 21,
    name: 'AssetCloseTo',
    type: '[]byte',
    notes: '32 byte address'
  },
  GroupIndex: {
    index: 22,
    name: 'GroupIndex',
    type: 'uint64',
    notes: 'Position of this transaction within an atomic transaction group. A stand-alone transaction is implicitly element 0 in a group of 1'
  },
  TxID: {
    index: 23,
    name: 'TxID',
    type: '[]byte',
    notes: 'The computed ID for this transaction. 32 bytes.'
  },
  ApplicationID: {
    index: 24,
    name: 'ApplicationID',
    type: 'uint64',
    in: 'v2',
    notes: 'ApplicationID from ApplicationCall transaction'
  },
  OnCompletion: {
    index: 25,
    name: 'OnCompletion',
    type: 'uint64',
    in: 'v2',
    notes: 'ApplicationCall transaction on completion action'
  },
  NumAppArgs: {
    index: 27,
    name: 'NumAppArgs',
    type: 'uint64',
    in: 'v2',
    notes: 'Number of ApplicationArgs'
  },
  NumAccounts: {
    index: 29,
    name: 'NumAccounts',
    type: 'uint64',
    in: 'v2',
    notes: 'Number of Accounts'
  },
  ApprovalProgram: {
    index: 30,
    name: 'ApprovalProgram',
    type: '[]byte',
    in: 'v2',
    notes: 'Approval program'
  },
  ClearStateProgram: {
    index: 31,
    name: 'ClearStateProgram',
    type: '[]byte',
    in: 'v2',
    notes: 'Clear state program'
  },
  RekeyTo: {
    index: 32,
    name: 'RekeyTo',
    type: '[]byte',
    in: 'v2',
    notes: '32 byte Sender\'s new AuthAddr'
  },
  ConfigAsset: {
    index: 33,
    name: 'ConfigAsset',
    type: 'uint64',
    in: 'v2',
    notes: 'Asset ID in asset config transaction'
  },
  ConfigAssetTotal: {
    index: 34,
    name: 'ConfigAssetTotal',
    type: 'uint64',
    in: 'v2',
    notes: 'Total number of units of this asset created'
  },
  ConfigAssetDecimals: {
    index: 35,
    name: 'ConfigAssetDecimals',
    type: 'uint64',
    in: 'v2',
    notes: 'Number of digits to display after the decimal place when displaying the asset'
  },
  ConfigAssetDefaultFrozen: {
    index: 36,
    name: 'ConfigAssetDefaultFrozen',
    type: 'uint64',
    in: 'v2',
    notes: 'Whether the asset\'s slots are frozen by default or not, 0 or 1'
  },
  ConfigAssetUnitName: {
    index: 37,
    name: 'ConfigAssetUnitName',
    type: '[]byte',
    in: 'v2',
    notes: 'Unit name of the asset'
  },
  ConfigAssetName: {
    index: 38,
    name: 'ConfigAssetName',
    type: '[]byte',
    in: 'v2',
    notes: 'The asset name'
  },
  ConfigAssetURL: {
    index: 39,
    name: 'ConfigAssetURL',
    type: '[]byte',
    in: 'v2',
    notes: 'URL'
  },
  ConfigAssetMetadataHash: {
    index: 40,
    name: 'ConfigAssetMetadataHash',
    type: '[]byte',
    in: 'v2',
    notes: '32 byte commitment to unspecified asset metadata'
  },
  ConfigAssetManager: {
    index: 41,
    name: 'ConfigAssetManager',
    type: '[]byte',
    in: 'v2',
    notes: '32 byte address'
  },
  ConfigAssetReserve: {
    index: 42,
    name: 'ConfigAssetReserve',
    type: '[]byte',
    in: 'v2',
    notes: '32 byte address'
  },
  ConfigAssetFreeze: {
    index: 43,
    name: 'ConfigAssetFreeze',
    type: '[]byte',
    in: 'v2',
    notes: '32 byte address'
  },
  ConfigAssetClawback: {
    index: 44,
    name: 'ConfigAssetClawback',
    type: '[]byte',
    in: 'v2',
    notes: '32 byte address'
  },
  FreezeAsset: {
    index: 45,
    name: 'FreezeAsset',
    type: 'uint64',
    in: 'v2',
    notes: 'Asset ID being frozen or un-frozen'
  },
  FreezeAssetAccount: {
    index: 46,
    name: 'FreezeAssetAccount',
    type: '[]byte',
    in: 'v2',
    notes: '32 byte address of the account whose asset slot is being frozen or un-frozen'
  },
  FreezeAssetFrozen: {
    index: 47,
    name: 'FreezeAssetFrozen',
    type: 'uint64',
    in: 'v2',
    notes: 'The new frozen value, 0 or 1'
  },
  NumAssets: {
    index: 49,
    name: 'NumAssets',
    type: 'uint64',
    in: 'v3',
    notes: 'Number of Assets'
  },
  NumApplications: {
    index: 51,
    name: 'NumApplications',
    type: 'uint64',
    in: 'v3',
    notes: 'Number of Applications'
  },
  GlobalNumUint: {
    index: 52,
    name: 'GlobalNumUint',
    type: 'uint64',
    in: 'v3',
    notes: 'Number of global state integers in ApplicationCall'
  },
  GlobalNumByteSlice: {
    index: 53,
    name: 'GlobalNumByteSlice',
    type: 'uint64',
    in: 'v3',
    notes: 'Number of global state byteslices in ApplicationCall'
  },
  LocalNumUint: {
    index: 54,
    name: 'LocalNumUint',
    type: 'uint64',
    in: 'v3',
    notes: 'Number of local state integers in ApplicationCall'
  },
  LocalNumByteSlice: {
    index: 55,
    name: 'LocalNumByteSlice',
    type: 'uint64',
    in: 'v3',
    notes: 'Number of local state byteslices in ApplicationCall'
  },
  ExtraProgramPages: {
    index: 56,
    name: 'ExtraProgramPages',
    type: 'uint64',
    in: 'v4',
    notes: 'Number of additional pages for each of the application\'s approval and clear state programs. An ExtraProgramPages of 1 means 2048 more total bytes, or 1024 for each program.'
  },
  Nonparticipation: {
    index: 57,
    name: 'Nonparticipation',
    type: 'uint64',
    in: 'v5',
    notes: 'Marks an account nonparticipating for rewards'
  },
  NumLogs: {
    index: 59,
    name: 'NumLogs',
    type: 'uint64',
    in: 'v5',
    notes: 'Number of Logs (only with itxn in v5). Application mode only'
  },
  CreatedAssetID: {
    index: 60,
    name: 'CreatedAssetID',
    type: 'uint64',
    in: 'v5',
    notes: 'Asset ID allocated by the creation of an ASA (only with itxn in v5). Application mode only'
  },
  CreatedApplicationID: {
    index: 61,
    name: 'CreatedApplicationID',
    type: 'uint64',
    in: 'v5',
    notes: 'ApplicationID allocated by the creation of an application (only with itxn in v5). Application mode only'
  },
  LastLog: {
    index: 62,
    name: 'LastLog',
    type: '[]byte',
    in: 'v6',
    notes: 'The last message emitted. Empty bytes if none were emitted. Application mode only'
  },
  StateProofPK: {
    index: 63,
    name: 'StateProofPK',
    type: '[]byte',
    in: 'v6',
    notes: '64 byte state proof public key'
  },
  NumApprovalProgramPages: {
    index: 65,
    name: 'NumApprovalProgramPages',
    type: 'uint64',
    in: 'v7',
    notes: 'Number of Approval Program pages'
  },
  NumClearStateProgramPages: {
    index: 67,
    name: 'NumClearStateProgramPages',
    type: 'uint64',
    in: 'v7',
    notes: 'Number of ClearState Program pages'
  }
} as const